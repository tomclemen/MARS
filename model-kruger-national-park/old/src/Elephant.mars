model KruegerNationalPark

use Mars

layer ElephantLayer as elephantLayer {
	def NextNormalDistribution () {
		// TODO: Distributions
		return random(100)
	}
}

agent Elephant on ElephantLayer {
	
	observe var Age : integer
	observe var Actions : string
	observe var Satiety : real = 100
	observe var Hydration : real = 100
	observe var BiomassConsumed : real
	observe var PregnantDuration : real
	observe var IsPregnant : bool
	var ReproductionYears = #[15, 40]
	
	observe var MatterOfDeath : MattersOfDeathType
	observe var ElephantLifePeriod : ElephantLifePeriodType
	observe var ElephantAgeType : ElephantType 	
	 
	external var HerdId : integer
	external var ElephantTypeString : string
	external var IsLeading : bool
	var HasEatenFruits : bool
	
	var Sources : List<Tuple<real, real>>
	
	def AddWaterSource(coordinate : Tuple<real, real>) {
		Sources.Add(coordinate)
	}
	
	def GetClosestWaterSource(coordinate : Tuple<real, real>) {
		return GetClosestWaterSourceInSight(coordinate)
	}  
	
	def GetClosestWaterSourceInSight(coordinate : Tuple<real, real>) {
		val agentMaxSizeInKm = 25
		val waterSource = nearest on KNPGISVectorWaterLayer in agentMaxSizeInKm of coordinate
		Sources.Add(waterSource)
		return waterSource
	}

	
	initialize {
		ElephantAgeType = ElephantMaps::TypeMap.Get(ElephantTypeString)
		switch (ElephantAgeType) {
			case ElephantType.ELEPHANT_NEWBORN : {
				Age = 0
			}
			case ElephantType.ELEPHANT_CALF : {
				Age = random(5) + 1
				ElephantLifePeriod = ElephantLifePeriodType.CALF
			}
			case ElephantType.ELEPHANT_BULL : {
				Age = elephantLayer.NextNormalDistribution
				ElephantLifePeriod = GetElephantLifePeriod
			}
			case ElephantType.ELEPHANT_COW : {
				Age = elephantLayer.NextNormalDistribution
            	ElephantLifePeriod = GetElephantLifePeriod
            	if(ReproductionYears.Exists[it=> return it === Age]) {
            		if(random() < 0.8) {
            			IsPregnant = true
            			PregnantDuration = random(22)
            		}
            	}
			}
			default : {
				Age = elephantLayer.NextNormalDistribution
				ElephantLifePeriod = GetElephantLifePeriod
			}
		}
		
	}
	
	def GetElephantLifePeriod() {
		if (Age < 5) return ElephantLifePeriodType.CALF
		else if (Age <= 18) return ElephantLifePeriodType.ADOLESCENT
		else return ElephantLifePeriodType.ADULT;
		
	}
}