model KruegerNationalPark

use Mars

vector-layer KNPGISVectorWaterLayer as vectorWater
//vector-layer KNPGISVectorTempLayer as vectorTemperature {
//	def GetTemperatureForSimTime() => vectorTemperature.GetNumberValue()
//}
//vector-layer KNPGISVectorPrecipitationLayer as vectorPrecipitation {
//	def GetMonthlyPrecipitation() => return vectorPrecipitation.GetNumberValue()
//}

raster-layer KNPGISRasterPrecipitationLayer as rasterPrecipitation
raster-layer KNPGISRasterTempLayer as rasterTemperature
raster-layer KNPGISRasterVegetationLayer as rasterVegetation
raster-layer KNPGISRasterShadeLayer as rasterShade {
	val FullPotential = 100
	def HasFulltPotential(coordinate : Tuple<real, real>) 
		=> return Math::Abs(FullPotential - rasterShade.GetIntegerValue(coordinate.Item1, coordinate.Item2)) < 0.00001	
}
raster-layer KNPGISRasterFenceLayer as rasterFence {
	def IsPointInside(coordinate : Tuple<real, real>) 
		=> return Math::Abs(rasterFence.GetNumberValue(coordinate.Item1, coordinate.Item2) - 1) < 0.0001
}

enum MattersOfDeathType { NOT_SET CULLING NO_WATER NO_FOOD AGE }
enum ElephantType { ELEPHANT_COW ELEPHANT_BULL ELEPHANT_CALF ELEPHANT_NEWBORN }
enum ElephantLifePeriodType { CALF ADOLESCENT ADULT }

static class ElephantMaps {
	val TypeMap : Map<string, ElephantType> = #{
		"ELEPHANT_COW" -> ElephantType.ELEPHANT_COW,
		"ELEPHANT_BULL" -> ElephantType.ELEPHANT_BULL,
		"ELEPHANT_CALF" -> ElephantType.ELEPHANT_CALF,
		"ELEPHANT_NEWBORN" -> ElephantType.ELEPHANT_NEWBORN
	} 
	
	val HydrationMap = #{
		ElephantLifePeriodType.CALF -> 140.0,	
		ElephantLifePeriodType.ADOLESCENT -> 190.0,
        ElephantLifePeriodType.ADULT -> 200.0
	}
	
	val SatietyIntakeHourly = #{
		ElephantLifePeriodType.CALF -> 0.009444,
        ElephantLifePeriodType.ADOLESCENT -> 0.01167,
        ElephantLifePeriodType.ADULT -> 0.01167
	}
}



